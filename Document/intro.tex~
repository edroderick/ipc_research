\section{INTRODUCTION}

As modern robotic systems grow in both size and complexity, the benefits of using a multi-process approach to control the system becomes more and more apparent. The modularity that arises from each susbsystem being broken down into individual processes allows for work to be spread across large teams of designers. By defining set inputs and outputs of each process, programmers can utlize whatever programming language is most appropriate for the required task. Additionally, the overall system can be distrubted across a variety of hardware (full computers, single board computers, microcontrollers) allowing for high levels of optimization and protection from a total system crash if a single subsystem fails. In order for all of these different processes running on different pieces of hardware to communicate effectivley, one must put careful consideration to the method in which these processes communicate.

While many different Interprocess controllers (IPC) exist, this paper will focus on a few mainstream options and how they apply directly to the design constraints applied to robotics. As robotics operate in real time, the latency and data integrity of each communication step is of critical importance. For highly complex systems (humanoids, robots operating in proximity with humans, etc) with a multitude of processes running simulatenously, any disruption in communication can result in information from sensors being processed late and actuators responding to data that is no longer valid. The result can range from the robot not accomplishing its desired task to catastrohpic system failures that can put humans working in the vicinity of the robot in danger.

Each process that will be evaluated has its own set of strenghts and weaknesses. There will be not be a 'one size fits all' solution to every system and the use of each IPC must be weighed against the design metrics of the system. In order to do so effectively, this paper serves to provide a broad understanding of capabilites of Sockets, ACH, ZeroMQ and ROS and how they apply to a real world example.
